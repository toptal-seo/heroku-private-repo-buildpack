#!/usr/bin/env bash
echo in comile script
####### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o posix      # more strict failures in subshells
#set -x          # enable debugging

# Configure directories
#bp_dir=$(cd $(dirname $0); cd ..; pwd)
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}

export "BUILDPACK_BUILD_DIR=$BUILD_DIR"
export "BUILDPACK_CACHE_DIR=$BUILD_DIR"
export "BUILDPACK_ENV_DIR=$BUILD_DIR"

echo build user is `whoami`
#ls -lrta ~

# first we need to set up ssh
sh scripts/add-sshkey.sh $ENV_DIR

echo "ENV_DIR"
echo  $ENV_DIR
#ls $ENV_DIR

# first move files in build directory to data directory
#cd $BUILD_DIR
#CURFILES=$(ls .)
#echo moving "${CURFILES} to $BUILD_DIR/data"
#mkdir data
#mv $CURFILES data

REPO=$(cat $ENV_DIR/BUILDPACK_REPO)
BRANCH=$(cat $ENV_DIR/HEROKU_TEST_RUN_BRANCH)
echo "Check branch $BRANCH";
ALLOWED_BRANCHES=(dev editor prod)
if !(printf '%s\n' "${ALLOWED_BRANCHES[@]}" | grep -xq $BRANCH); then
  BRANCH=dev
fi

# read repo to pull into app directory
#REPO=$(cat $BUILD_DIR/.heroku-private-build.lst)
APP_NAME=cms-buildpack #TODO: make dynamic by repo
if [ ! -d $CACHE_DIR/$APP_NAME ]; then
  echo "Cloning $REPO :: $BRANCH"
  git clone $REPO $CACHE_DIR/$APP_NAME
else
  echo "Pulling $REPO :: $BRANCH"
  git pull
fi
cd $CACHE_DIR/$APP_NAME
git switch $BRANCH
#ls -lrt $CACHE_DIR/$APP_NAME

#call the apps  compile script of the downloaded repository.
if [ -f $CACHE_DIR/$APP_NAME/bin/compile ]; then
    echo "Calling app compile script $CACHE_DIR/$APP_NAME/bin/compile"
    cd bin
    ./compile  "$BUILD_DIR" "$CACHE_DIR" "$ENV_DIR"
    exit $?
else
    echo "No compile file in app"
    exit 1
fi
